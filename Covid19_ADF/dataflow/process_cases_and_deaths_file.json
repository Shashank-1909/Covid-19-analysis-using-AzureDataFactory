{
	"name": "process_cases_and_deaths_file",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "cases_deaths_ds",
						"type": "DatasetReference"
					},
					"name": "covid19CasesAndDeathsSource",
					"description": "The source represents the cases_deaths.csv file."
				},
				{
					"dataset": {
						"referenceName": "country_lookup_ds",
						"type": "DatasetReference"
					},
					"name": "LookupCountryCode2chars",
					"description": "The data source points to a lookup table which contains country code with 2 characters."
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "sink_cases_and_deaths_ds",
						"type": "DatasetReference"
					},
					"name": "SinkCasesAndDeaths",
					"description": "The sink datasets points to the cases and deaths file after processing is done."
				}
			],
			"transformations": [
				{
					"name": "FilterOnContinent",
					"description": "As we are analyzing the data for European countries the data must be filtered by Europe"
				},
				{
					"name": "SelectAndDeleteFields1",
					"description": "This command removes the unwanted columns as well as does the required column name change."
				},
				{
					"name": "lookupFor2CharCountryCode",
					"description": "Certain tables only contain 2 digit country code, so this column may be needed for further join transformations."
				},
				{
					"name": "SelectAndDeleteFields2",
					"description": "After the lookup function the select function is required to select relevant fields"
				},
				{
					"name": "PivotIndicatorColumn",
					"description": "In order to have a clear look on the number of the number of confirmed cases and deaths due to covid, pivot on the indicator column was required"
				},
				{
					"name": "ChangeColumnName",
					"description": "country_code_3_digit, population, reported_date, source, confirmed cases_count, deaths_count'"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          country_code as string,",
				"          continent as string,",
				"          population as integer,",
				"          indicator as string,",
				"          daily_count as short,",
				"          date as date,",
				"          rate_14_day as double,",
				"          source as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false) ~> covid19CasesAndDeathsSource",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false) ~> LookupCountryCode2chars",
				"covid19CasesAndDeathsSource filter(continent == 'Europe' && not(isNull(country_code))) ~> FilterOnContinent",
				"FilterOnContinent select(mapColumn(",
				"          country,",
				"          country_code,",
				"          population,",
				"          indicator,",
				"          daily_count,",
				"          reported_date = date,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectAndDeleteFields1",
				"SelectAndDeleteFields1, LookupCountryCode2chars lookup(country_code == country_code_3_digit,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupFor2CharCountryCode",
				"lookupFor2CharCountryCode select(mapColumn(",
				"          country = SelectAndDeleteFields1@country,",
				"          country_code_2_digit,",
				"          country_code_3_digit = country_code,",
				"          population = SelectAndDeleteFields1@population,",
				"          indicator,",
				"          daily_count,",
				"          reported_date,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectAndDeleteFields2",
				"SelectAndDeleteFields2 pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_date,",
				"          source),",
				"     pivotBy(indicator, ['confirmed cases', 'deaths']),",
				"     count = sum(daily_count),",
				"     columnNaming: '$V_$N',",
				"     lateral: true) ~> PivotIndicatorColumn",
				"PivotIndicatorColumn select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_date,",
				"          source,",
				"          confirmed_cases_count = {confirmed cases_count},",
				"          deaths_count",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> ChangeColumnName",
				"ChangeColumnName sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     truncate: true,",
				"     umask: 0764,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SinkCasesAndDeaths"
			]
		}
	}
}
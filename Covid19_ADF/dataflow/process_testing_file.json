{
	"name": "process_testing_file",
	"properties": {
		"description": "the data flow will process the testing.csv file and will drop the processed file into the processed container.",
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "testing_ds",
						"type": "DatasetReference"
					},
					"name": "TestingFileSource",
					"description": "Source for the testing.csv file present in the raw container"
				},
				{
					"dataset": {
						"referenceName": "date_lookup_ds",
						"type": "DatasetReference"
					},
					"name": "DateLookupSource",
					"description": "This source points to the date_lookup.csv file."
				},
				{
					"dataset": {
						"referenceName": "country_lookup_ds",
						"type": "DatasetReference"
					},
					"name": "CountryLookupSource",
					"description": "This dataset points to the country_lookup.csv file."
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "sink_testing_ds",
						"type": "DatasetReference"
					},
					"name": "SInkTesting",
					"description": "Add Processed testing.csv data to the processed container."
				}
			],
			"transformations": [
				{
					"name": "StartOfWeek",
					"description": "This function adds calculates start_of_week and end_of_week columns"
				},
				{
					"name": "lookupForWeekColumns",
					"description": "This function will add start_of_week and end_of week columns to the covid testin data"
				},
				{
					"name": "LookupForCountryCode",
					"description": "Lookup the country_code_3_digit column from the CountryLookupSource."
				},
				{
					"name": "DerivedColumns",
					"description": "Round off the testing rate and positivity rate to 2 decimal places."
				},
				{
					"name": "RemoveDuplicateColumns",
					"description": "Removing extra duplicate columns from the data"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          country_code as string,",
				"          year_week as string,",
				"          new_cases as integer,",
				"          tests_done as integer,",
				"          population as integer,",
				"          testing_rate as double,",
				"          positivity_rate as double,",
				"          testing_data_source as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false) ~> TestingFileSource",
				"source(output(",
				"          date_key as integer,",
				"          date as date,",
				"          year as string,",
				"          month as short,",
				"          day as short,",
				"          day_name as string,",
				"          day_of_year as short,",
				"          week_of_month as short,",
				"          week_of_year as string,",
				"          month_name as string,",
				"          year_month as integer,",
				"          year_week as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false) ~> DateLookupSource",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false) ~> CountryLookupSource",
				"DateLookupSource aggregate(groupBy(week_name = year+'-W'+lpad(week_of_year,2,'0')),",
				"     start_of_week = min(date),",
				"          end_of_week = max(date)) ~> StartOfWeek",
				"TestingFileSource, StartOfWeek lookup(year_week == week_name,",
				"     multiple: true,",
				"     broadcast: 'auto')~> lookupForWeekColumns",
				"lookupForWeekColumns, CountryLookupSource lookup(TestingFileSource@country == CountryLookupSource@country,",
				"     multiple: true,",
				"     broadcast: 'auto')~> LookupForCountryCode",
				"LookupForCountryCode derive(testing_rate = round(testing_rate,2),",
				"          positivity_rate = round(positivity_rate,2)) ~> DerivedColumns",
				"DerivedColumns select(mapColumn(",
				"          country = TestingFileSource@country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population = TestingFileSource@population,",
				"          year_week,",
				"          start_of_week,",
				"          end_of_week,",
				"          new_cases,",
				"          tests_done,",
				"          testing_rate,",
				"          positivity_rate,",
				"          testing_data_source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemoveDuplicateColumns",
				"RemoveDuplicateColumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     truncate: true,",
				"     umask: 0764,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SInkTesting"
			]
		}
	}
}